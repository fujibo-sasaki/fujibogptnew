"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ai";
exports.ids = ["vendor-chunks/ai"];
exports.modules = {

/***/ "(ssr)/./node_modules/ai/node_modules/nanoid/non-secure/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/ai/node_modules/nanoid/non-secure/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   customAlphabet: () => (/* binding */ customAlphabet),\n/* harmony export */   nanoid: () => (/* binding */ nanoid)\n/* harmony export */ });\nlet urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nlet customAlphabet = (alphabet, defaultSize = 21) => {\n  return (size = defaultSize) => {\n    let id = ''\n    let i = size\n    while (i--) {\n      id += alphabet[(Math.random() * alphabet.length) | 0]\n    }\n    return id\n  }\n}\nlet nanoid = (size = 21) => {\n  let id = ''\n  let i = size\n  while (i--) {\n    id += urlAlphabet[(Math.random() * 64) | 0]\n  }\n  return id\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL25hbm9pZC9ub24tc2VjdXJlL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F6dXJlLW9wZW4tYWktYWNjZWxlcmF0b3IvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL25hbm9pZC9ub24tc2VjdXJlL2luZGV4LmpzPzVlMzQiXSwic291cmNlc0NvbnRlbnQiOlsibGV0IHVybEFscGhhYmV0ID1cbiAgJ3VzZWFuZG9tLTI2VDE5ODM0MFBYNzVweEpBQ0tWRVJZTUlOREJVU0hXT0xGX0dRWmJmZ2hqa2xxdnd5enJpY3QnXG5sZXQgY3VzdG9tQWxwaGFiZXQgPSAoYWxwaGFiZXQsIGRlZmF1bHRTaXplID0gMjEpID0+IHtcbiAgcmV0dXJuIChzaXplID0gZGVmYXVsdFNpemUpID0+IHtcbiAgICBsZXQgaWQgPSAnJ1xuICAgIGxldCBpID0gc2l6ZVxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlkICs9IGFscGhhYmV0WyhNYXRoLnJhbmRvbSgpICogYWxwaGFiZXQubGVuZ3RoKSB8IDBdXG4gICAgfVxuICAgIHJldHVybiBpZFxuICB9XG59XG5sZXQgbmFub2lkID0gKHNpemUgPSAyMSkgPT4ge1xuICBsZXQgaWQgPSAnJ1xuICBsZXQgaSA9IHNpemVcbiAgd2hpbGUgKGktLSkge1xuICAgIGlkICs9IHVybEFscGhhYmV0WyhNYXRoLnJhbmRvbSgpICogNjQpIHwgMF1cbiAgfVxuICByZXR1cm4gaWRcbn1cbmV4cG9ydCB7IG5hbm9pZCwgY3VzdG9tQWxwaGFiZXQgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ai/node_modules/nanoid/non-secure/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ai/react/dist/index.mjs":
/*!**********************************************!*\
  !*** ./node_modules/ai/react/dist/index.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useChat: () => (/* binding */ useChat),\n/* harmony export */   useCompletion: () => (/* binding */ useCompletion)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var swr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! swr */ \"(ssr)/./node_modules/swr/core/dist/index.mjs\");\n/* harmony import */ var nanoid_non_secure__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! nanoid/non-secure */ \"(ssr)/./node_modules/ai/node_modules/nanoid/non-secure/index.js\");\n'use client'\n\n// react/use-chat.ts\n;\n\n\n// shared/utils.ts\n\nvar nanoid = (0,nanoid_non_secure__WEBPACK_IMPORTED_MODULE_2__.customAlphabet)(\n  \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n  7\n);\nfunction createChunkDecoder(complex) {\n  const decoder = new TextDecoder();\n  if (!complex) {\n    return function(chunk) {\n      if (!chunk)\n        return \"\";\n      return decoder.decode(chunk, { stream: true });\n    };\n  }\n  return function(chunk) {\n    const decoded = decoder.decode(chunk, { stream: true }).split(\"\\n\").filter((line) => line !== \"\");\n    return decoded.map(getStreamStringTypeAndValue).filter(Boolean);\n  };\n}\nvar StreamStringPrefixes = {\n  text: 0,\n  function_call: 1,\n  data: 2\n  // user_err: 3?\n};\nvar getStreamStringTypeAndValue = (line) => {\n  const firstSeperatorIndex = line.indexOf(\":\");\n  const prefix = line.slice(0, firstSeperatorIndex);\n  const type = Object.keys(StreamStringPrefixes).find(\n    (key) => StreamStringPrefixes[key] === Number(prefix)\n  );\n  const val = line.slice(firstSeperatorIndex + 1);\n  let parsedVal = val;\n  if (!val) {\n    return { type, value: \"\" };\n  }\n  try {\n    parsedVal = JSON.parse(val);\n  } catch (e) {\n    console.error(\"Failed to parse JSON value:\", val);\n  }\n  return { type, value: parsedVal };\n};\nvar COMPLEX_HEADER = \"X-Experimental-Stream-Data\";\n\n// react/parseComplexResponse.ts\nasync function parseComplexResponse({\n  reader,\n  abortControllerRef,\n  update\n}) {\n  const decode = createChunkDecoder(true);\n  const createdAt = /* @__PURE__ */ new Date();\n  const prefixMap = {};\n  const NEWLINE = \"\\n\".charCodeAt(0);\n  let chunks = [];\n  let totalLength = 0;\n  while (true) {\n    const { value } = await reader.read();\n    if (value) {\n      chunks.push(value);\n      totalLength += value.length;\n      if (value[value.length - 1] !== NEWLINE) {\n        continue;\n      }\n    }\n    if (chunks.length === 0) {\n      break;\n    }\n    let concatenatedChunks = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const chunk of chunks) {\n      concatenatedChunks.set(chunk, offset);\n      offset += chunk.length;\n    }\n    chunks.length = 0;\n    totalLength = 0;\n    const lines = decode(concatenatedChunks);\n    if (typeof lines === \"string\") {\n      throw new Error(\n        \"Invalid response format. Complex mode was set but the response is a string. This should never happen.\"\n      );\n    }\n    for (const { type, value: value2 } of lines) {\n      if (type === \"text\") {\n        if (prefixMap[\"text\"]) {\n          prefixMap[\"text\"] = {\n            ...prefixMap[\"text\"],\n            content: (prefixMap[\"text\"].content || \"\") + value2\n          };\n        } else {\n          prefixMap[\"text\"] = {\n            id: nanoid(),\n            role: \"assistant\",\n            content: value2,\n            createdAt\n          };\n        }\n      }\n      let functionCallMessage = null;\n      if (type === \"function_call\") {\n        prefixMap[\"function_call\"] = value2;\n        let functionCall = prefixMap[\"function_call\"];\n        if (functionCall && typeof functionCall === \"string\") {\n          const parsedFunctionCall = JSON.parse(\n            functionCall\n          ).function_call;\n          functionCallMessage = {\n            id: nanoid(),\n            role: \"assistant\",\n            content: \"\",\n            function_call: parsedFunctionCall,\n            name: parsedFunctionCall.name,\n            createdAt\n          };\n          prefixMap[\"function_call\"] = functionCallMessage;\n        }\n      }\n      if (type === \"data\") {\n        const parsedValue = JSON.parse(value2);\n        if (prefixMap[\"data\"]) {\n          prefixMap[\"data\"] = [...prefixMap[\"data\"], ...parsedValue];\n        } else {\n          prefixMap[\"data\"] = parsedValue;\n        }\n      }\n      const data = prefixMap[\"data\"];\n      const responseMessage = prefixMap[\"text\"];\n      const merged = [functionCallMessage, responseMessage].filter(\n        Boolean\n      );\n      update(merged, data);\n      if (abortControllerRef.current === null) {\n        reader.cancel();\n        break;\n      }\n    }\n  }\n  return prefixMap;\n}\n\n// react/use-chat.ts\nvar getStreamedResponse = async (api, chatRequest, mutate, mutateStreamData, existingData, extraMetadataRef, messagesRef, abortControllerRef, onFinish, onResponse, sendExtraMessageFields) => {\n  var _a, _b;\n  const previousMessages = messagesRef.current;\n  mutate(chatRequest.messages, false);\n  const constructedMessagesPayload = sendExtraMessageFields ? chatRequest.messages : chatRequest.messages.map(({ role, content, name, function_call }) => ({\n    role,\n    content,\n    ...name !== void 0 && { name },\n    ...function_call !== void 0 && {\n      function_call\n    }\n  }));\n  if (typeof api !== \"string\") {\n    const replyId = nanoid();\n    const createdAt = /* @__PURE__ */ new Date();\n    let responseMessage = {\n      id: replyId,\n      createdAt,\n      content: \"\",\n      role: \"assistant\"\n    };\n    async function readRow(promise) {\n      const { content, ui, next } = await promise;\n      responseMessage[\"content\"] = content;\n      responseMessage[\"ui\"] = await ui;\n      mutate([...chatRequest.messages, { ...responseMessage }], false);\n      if (next) {\n        await readRow(next);\n      }\n    }\n    try {\n      const promise = api({\n        messages: constructedMessagesPayload\n      });\n      await readRow(promise);\n    } catch (e) {\n      mutate(previousMessages, false);\n      throw e;\n    }\n    if (onFinish) {\n      onFinish(responseMessage);\n    }\n    return responseMessage;\n  }\n  const res = await fetch(api, {\n    method: \"POST\",\n    body: JSON.stringify({\n      messages: constructedMessagesPayload,\n      ...extraMetadataRef.current.body,\n      ...(_a = chatRequest.options) == null ? void 0 : _a.body,\n      ...chatRequest.functions !== void 0 && {\n        functions: chatRequest.functions\n      },\n      ...chatRequest.function_call !== void 0 && {\n        function_call: chatRequest.function_call\n      }\n    }),\n    credentials: extraMetadataRef.current.credentials,\n    headers: {\n      ...extraMetadataRef.current.headers,\n      ...(_b = chatRequest.options) == null ? void 0 : _b.headers\n    },\n    ...abortControllerRef.current !== null && {\n      signal: abortControllerRef.current.signal\n    }\n  }).catch((err) => {\n    mutate(previousMessages, false);\n    throw err;\n  });\n  if (onResponse) {\n    try {\n      await onResponse(res);\n    } catch (err) {\n      throw err;\n    }\n  }\n  if (!res.ok) {\n    mutate(previousMessages, false);\n    throw new Error(await res.text() || \"Failed to fetch the chat response.\");\n  }\n  if (!res.body) {\n    throw new Error(\"The response body is empty.\");\n  }\n  const isComplexMode = res.headers.get(COMPLEX_HEADER) === \"true\";\n  let responseMessages = [];\n  const reader = res.body.getReader();\n  let responseData = [];\n  if (isComplexMode) {\n    const prefixMap = await parseComplexResponse({\n      reader,\n      abortControllerRef,\n      update(merged, data) {\n        mutate([...chatRequest.messages, ...merged], false);\n        mutateStreamData([...existingData || [], ...data || []], false);\n      }\n    });\n    for (const [type, item] of Object.entries(prefixMap)) {\n      if (onFinish && type === \"text\") {\n        onFinish(item);\n      }\n      if (type === \"data\") {\n        responseData.push(item);\n      } else {\n        responseMessages.push(item);\n      }\n    }\n    return { messages: responseMessages, data: responseData };\n  } else {\n    const createdAt = /* @__PURE__ */ new Date();\n    const decode = createChunkDecoder(false);\n    let streamedResponse = \"\";\n    const replyId = nanoid();\n    let responseMessage = {\n      id: replyId,\n      createdAt,\n      content: \"\",\n      role: \"assistant\"\n    };\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        break;\n      }\n      streamedResponse += decode(value);\n      if (streamedResponse.startsWith('{\"function_call\":')) {\n        responseMessage[\"function_call\"] = streamedResponse;\n      } else {\n        responseMessage[\"content\"] = streamedResponse;\n      }\n      mutate([...chatRequest.messages, { ...responseMessage }], false);\n      if (abortControllerRef.current === null) {\n        reader.cancel();\n        break;\n      }\n    }\n    if (streamedResponse.startsWith('{\"function_call\":')) {\n      const parsedFunctionCall = JSON.parse(streamedResponse).function_call;\n      responseMessage[\"function_call\"] = parsedFunctionCall;\n      mutate([...chatRequest.messages, { ...responseMessage }]);\n    }\n    if (onFinish) {\n      onFinish(responseMessage);\n    }\n    return responseMessage;\n  }\n};\nfunction useChat({\n  api = \"/api/chat\",\n  id,\n  initialMessages = [],\n  initialInput = \"\",\n  sendExtraMessageFields,\n  experimental_onFunctionCall,\n  onResponse,\n  onFinish,\n  onError,\n  credentials,\n  headers,\n  body\n} = {}) {\n  const hookId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n  const chatId = id || hookId;\n  const { data: messages, mutate } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([api, chatId], null, {\n    fallbackData: initialMessages\n  });\n  const { data: isLoading = false, mutate: mutateLoading } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\n    [chatId, \"loading\"],\n    null\n  );\n  const { data: streamData, mutate: mutateStreamData } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\n    [chatId, \"streamData\"],\n    null\n  );\n  const messagesRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(messages || []);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    messagesRef.current = messages || [];\n  }, [messages]);\n  const abortControllerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const extraMetadataRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n    credentials,\n    headers,\n    body\n  });\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    extraMetadataRef.current = {\n      credentials,\n      headers,\n      body\n    };\n  }, [credentials, headers, body]);\n  const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n  const triggerRequest = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    async (chatRequest) => {\n      try {\n        mutateLoading(true);\n        setError(void 0);\n        const abortController = new AbortController();\n        abortControllerRef.current = abortController;\n        while (true) {\n          const messagesAndDataOrJustMessage = await getStreamedResponse(\n            api,\n            chatRequest,\n            mutate,\n            mutateStreamData,\n            streamData,\n            extraMetadataRef,\n            messagesRef,\n            abortControllerRef,\n            onFinish,\n            onResponse,\n            sendExtraMessageFields\n          );\n          if (\"messages\" in messagesAndDataOrJustMessage) {\n            let hasFollowingResponse = false;\n            for (const message of messagesAndDataOrJustMessage.messages) {\n              if (message.function_call === void 0 || typeof message.function_call === \"string\") {\n                continue;\n              }\n              hasFollowingResponse = true;\n              if (experimental_onFunctionCall) {\n                const functionCall = message.function_call;\n                const functionCallResponse = await experimental_onFunctionCall(\n                  messagesRef.current,\n                  functionCall\n                );\n                if (functionCallResponse === void 0) {\n                  hasFollowingResponse = false;\n                  break;\n                }\n                chatRequest = functionCallResponse;\n              }\n            }\n            if (!hasFollowingResponse) {\n              break;\n            }\n          } else {\n            const streamedResponseMessage = messagesAndDataOrJustMessage;\n            if (streamedResponseMessage.function_call === void 0 || typeof streamedResponseMessage.function_call === \"string\") {\n              break;\n            }\n            if (experimental_onFunctionCall) {\n              const functionCall = streamedResponseMessage.function_call;\n              const functionCallResponse = await experimental_onFunctionCall(\n                messagesRef.current,\n                functionCall\n              );\n              if (functionCallResponse === void 0)\n                break;\n              chatRequest = functionCallResponse;\n            }\n          }\n        }\n        abortControllerRef.current = null;\n      } catch (err) {\n        if (err.name === \"AbortError\") {\n          abortControllerRef.current = null;\n          return null;\n        }\n        if (onError && err instanceof Error) {\n          onError(err);\n        }\n        setError(err);\n      } finally {\n        mutateLoading(false);\n      }\n    },\n    [\n      mutate,\n      mutateLoading,\n      api,\n      extraMetadataRef,\n      onResponse,\n      onFinish,\n      onError,\n      setError,\n      mutateStreamData,\n      streamData,\n      sendExtraMessageFields,\n      experimental_onFunctionCall,\n      messagesRef.current,\n      abortControllerRef.current\n    ]\n  );\n  const append = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    async (message, { options, functions, function_call } = {}) => {\n      if (!message.id) {\n        message.id = nanoid();\n      }\n      const chatRequest = {\n        messages: messagesRef.current.concat(message),\n        options,\n        ...functions !== void 0 && { functions },\n        ...function_call !== void 0 && { function_call }\n      };\n      return triggerRequest(chatRequest);\n    },\n    [triggerRequest]\n  );\n  const reload = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    async ({ options, functions, function_call } = {}) => {\n      if (messagesRef.current.length === 0)\n        return null;\n      const lastMessage = messagesRef.current[messagesRef.current.length - 1];\n      if (lastMessage.role === \"assistant\") {\n        const chatRequest2 = {\n          messages: messagesRef.current.slice(0, -1),\n          options,\n          ...functions !== void 0 && { functions },\n          ...function_call !== void 0 && { function_call }\n        };\n        return triggerRequest(chatRequest2);\n      }\n      const chatRequest = {\n        messages: messagesRef.current,\n        options,\n        ...functions !== void 0 && { functions },\n        ...function_call !== void 0 && { function_call }\n      };\n      return triggerRequest(chatRequest);\n    },\n    [triggerRequest]\n  );\n  const stop = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n    }\n  }, []);\n  const setMessages = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (messages2) => {\n      mutate(messages2, false);\n      messagesRef.current = messages2;\n    },\n    [mutate]\n  );\n  const [input, setInput] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialInput);\n  const handleSubmit = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (e, { options, functions, function_call } = {}, metadata) => {\n      if (metadata) {\n        extraMetadataRef.current = {\n          ...extraMetadataRef.current,\n          ...metadata\n        };\n      }\n      e.preventDefault();\n      if (!input)\n        return;\n      append(\n        {\n          content: input,\n          role: \"user\",\n          createdAt: /* @__PURE__ */ new Date()\n        },\n        { options, functions, function_call }\n      );\n      setInput(\"\");\n    },\n    [input, append]\n  );\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n  };\n  return {\n    messages: messages || [],\n    error,\n    append,\n    reload,\n    stop,\n    setMessages,\n    input,\n    setInput,\n    handleInputChange,\n    handleSubmit,\n    isLoading,\n    data: streamData\n  };\n}\n\n// react/use-completion.ts\n\n\nfunction useCompletion({\n  api = \"/api/completion\",\n  id,\n  initialCompletion = \"\",\n  initialInput = \"\",\n  credentials,\n  headers,\n  body,\n  onResponse,\n  onFinish,\n  onError\n} = {}) {\n  const hookId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n  const completionId = id || hookId;\n  const { data, mutate } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([api, completionId], null, {\n    fallbackData: initialCompletion\n  });\n  const { data: isLoading = false, mutate: mutateLoading } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\n    [completionId, \"loading\"],\n    null\n  );\n  const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0);\n  const completion = data;\n  const [abortController, setAbortController] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n  const extraMetadataRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n    credentials,\n    headers,\n    body\n  });\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    extraMetadataRef.current = {\n      credentials,\n      headers,\n      body\n    };\n  }, [credentials, headers, body]);\n  const triggerRequest = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    async (prompt, options) => {\n      try {\n        mutateLoading(true);\n        setError(void 0);\n        const abortController2 = new AbortController();\n        setAbortController(abortController2);\n        mutate(\"\", false);\n        const res = await fetch(api, {\n          method: \"POST\",\n          body: JSON.stringify({\n            prompt,\n            ...extraMetadataRef.current.body,\n            ...options == null ? void 0 : options.body\n          }),\n          credentials: extraMetadataRef.current.credentials,\n          headers: {\n            ...extraMetadataRef.current.headers,\n            ...options == null ? void 0 : options.headers\n          },\n          signal: abortController2.signal\n        }).catch((err) => {\n          throw err;\n        });\n        if (onResponse) {\n          try {\n            await onResponse(res);\n          } catch (err) {\n            throw err;\n          }\n        }\n        if (!res.ok) {\n          throw new Error(\n            await res.text() || \"Failed to fetch the chat response.\"\n          );\n        }\n        if (!res.body) {\n          throw new Error(\"The response body is empty.\");\n        }\n        let result = \"\";\n        const reader = res.body.getReader();\n        const decoder = createChunkDecoder();\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) {\n            break;\n          }\n          result += decoder(value);\n          mutate(result, false);\n          if (abortController2 === null) {\n            reader.cancel();\n            break;\n          }\n        }\n        if (onFinish) {\n          onFinish(prompt, result);\n        }\n        setAbortController(null);\n        return result;\n      } catch (err) {\n        if (err.name === \"AbortError\") {\n          setAbortController(null);\n          return null;\n        }\n        if (err instanceof Error) {\n          if (onError) {\n            onError(err);\n          }\n        }\n        setError(err);\n      } finally {\n        mutateLoading(false);\n      }\n    },\n    [\n      mutate,\n      mutateLoading,\n      api,\n      extraMetadataRef,\n      setAbortController,\n      onResponse,\n      onFinish,\n      onError,\n      setError\n    ]\n  );\n  const stop = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    if (abortController) {\n      abortController.abort();\n      setAbortController(null);\n    }\n  }, [abortController]);\n  const setCompletion = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (completion2) => {\n      mutate(completion2, false);\n    },\n    [mutate]\n  );\n  const complete = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    async (prompt, options) => {\n      return triggerRequest(prompt, options);\n    },\n    [triggerRequest]\n  );\n  const [input, setInput] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialInput);\n  const handleSubmit = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (e) => {\n      e.preventDefault();\n      if (!input)\n        return;\n      return complete(input);\n    },\n    [input, complete]\n  );\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n  };\n  return {\n    completion,\n    complete,\n    error,\n    setCompletion,\n    stop,\n    input,\n    setInput,\n    handleInputChange,\n    handleSubmit,\n    isLoading\n  };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ai/react/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/dist/index.mjs":
/*!****************************************!*\
  !*** ./node_modules/ai/dist/index.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIStream: () => (/* binding */ AIStream),\n/* harmony export */   AnthropicStream: () => (/* binding */ AnthropicStream),\n/* harmony export */   COMPLEX_HEADER: () => (/* binding */ COMPLEX_HEADER),\n/* harmony export */   CohereStream: () => (/* binding */ CohereStream),\n/* harmony export */   HuggingFaceStream: () => (/* binding */ HuggingFaceStream),\n/* harmony export */   LangChainStream: () => (/* binding */ LangChainStream),\n/* harmony export */   OpenAIStream: () => (/* binding */ OpenAIStream),\n/* harmony export */   ReplicateStream: () => (/* binding */ ReplicateStream),\n/* harmony export */   StreamStringPrefixes: () => (/* binding */ StreamStringPrefixes),\n/* harmony export */   StreamingTextResponse: () => (/* binding */ StreamingTextResponse),\n/* harmony export */   createCallbacksTransformer: () => (/* binding */ createCallbacksTransformer),\n/* harmony export */   createChunkDecoder: () => (/* binding */ createChunkDecoder),\n/* harmony export */   createEventStreamTransformer: () => (/* binding */ createEventStreamTransformer),\n/* harmony export */   createStreamDataTransformer: () => (/* binding */ createStreamDataTransformer),\n/* harmony export */   experimental_StreamData: () => (/* binding */ experimental_StreamData),\n/* harmony export */   experimental_StreamingReactResponse: () => (/* binding */ experimental_StreamingReactResponse),\n/* harmony export */   getStreamString: () => (/* binding */ getStreamString),\n/* harmony export */   getStreamStringTypeAndValue: () => (/* binding */ getStreamStringTypeAndValue),\n/* harmony export */   isStreamStringEqualToType: () => (/* binding */ isStreamStringEqualToType),\n/* harmony export */   nanoid: () => (/* binding */ nanoid),\n/* harmony export */   readableFromAsyncIterable: () => (/* binding */ readableFromAsyncIterable),\n/* harmony export */   streamToResponse: () => (/* binding */ streamToResponse),\n/* harmony export */   trimStartOfStreamHelper: () => (/* binding */ trimStartOfStreamHelper)\n/* harmony export */ });\n/* harmony import */ var eventsource_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! eventsource-parser */ \"(rsc)/./node_modules/eventsource-parser/dist/index.js\");\n/* harmony import */ var nanoid_non_secure__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! nanoid/non-secure */ \"(rsc)/./node_modules/ai/node_modules/nanoid/non-secure/index.js\");\n// streams/ai-stream.ts\n\nfunction createEventStreamTransformer(customParser) {\n    const textDecoder = new TextDecoder();\n    let eventSourceParser;\n    return new TransformStream({\n        async start (controller) {\n            eventSourceParser = (0,eventsource_parser__WEBPACK_IMPORTED_MODULE_0__.createParser)((event)=>{\n                if (\"data\" in event && event.type === \"event\" && event.data === \"[DONE]\" || // Replicate doesn't send [DONE] but does send a 'done' event\n                // @see https://replicate.com/docs/streaming\n                event.event === \"done\") {\n                    controller.terminate();\n                    return;\n                }\n                if (\"data\" in event) {\n                    const parsedMessage = customParser ? customParser(event.data) : event.data;\n                    if (parsedMessage) controller.enqueue(parsedMessage);\n                }\n            });\n        },\n        transform (chunk) {\n            eventSourceParser.feed(textDecoder.decode(chunk));\n        }\n    });\n}\nfunction createCallbacksTransformer(cb) {\n    const textEncoder = new TextEncoder();\n    let aggregatedResponse = \"\";\n    const callbacks = cb || {};\n    return new TransformStream({\n        async start () {\n            if (callbacks.onStart) await callbacks.onStart();\n        },\n        async transform (message, controller) {\n            controller.enqueue(textEncoder.encode(message));\n            aggregatedResponse += message;\n            if (callbacks.onToken) await callbacks.onToken(message);\n        },\n        async flush () {\n            const isOpenAICallbacks = isOfTypeOpenAIStreamCallbacks(callbacks);\n            if (callbacks.onCompletion) {\n                await callbacks.onCompletion(aggregatedResponse);\n            }\n            if (callbacks.onFinal && !isOpenAICallbacks) {\n                await callbacks.onFinal(aggregatedResponse);\n            }\n        }\n    });\n}\nfunction isOfTypeOpenAIStreamCallbacks(callbacks) {\n    return \"experimental_onFunctionCall\" in callbacks;\n}\nfunction trimStartOfStreamHelper() {\n    let isStreamStart = true;\n    return (text)=>{\n        if (isStreamStart) {\n            text = text.trimStart();\n            if (text) isStreamStart = false;\n        }\n        return text;\n    };\n}\nfunction AIStream(response, customParser, callbacks) {\n    if (!response.ok) {\n        if (response.body) {\n            const reader = response.body.getReader();\n            return new ReadableStream({\n                async start (controller) {\n                    const { done, value } = await reader.read();\n                    if (!done) {\n                        const errorText = new TextDecoder().decode(value);\n                        controller.error(new Error(`Response error: ${errorText}`));\n                    }\n                }\n            });\n        } else {\n            return new ReadableStream({\n                start (controller) {\n                    controller.error(new Error(\"Response error: No response body\"));\n                }\n            });\n        }\n    }\n    const responseBodyStream = response.body || createEmptyReadableStream();\n    return responseBodyStream.pipeThrough(createEventStreamTransformer(customParser)).pipeThrough(createCallbacksTransformer(callbacks));\n}\nfunction createEmptyReadableStream() {\n    return new ReadableStream({\n        start (controller) {\n            controller.close();\n        }\n    });\n}\nfunction readableFromAsyncIterable(iterable) {\n    let it = iterable[Symbol.asyncIterator]();\n    return new ReadableStream({\n        async pull (controller) {\n            const { done, value } = await it.next();\n            if (done) controller.close();\n            else controller.enqueue(value);\n        },\n        async cancel (reason) {\n            var _a;\n            await ((_a = it.return) == null ? void 0 : _a.call(it, reason));\n        }\n    });\n}\n// shared/utils.ts\n\nvar nanoid = (0,nanoid_non_secure__WEBPACK_IMPORTED_MODULE_1__.customAlphabet)(\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\", 7);\nfunction createChunkDecoder(complex) {\n    const decoder = new TextDecoder();\n    if (!complex) {\n        return function(chunk) {\n            if (!chunk) return \"\";\n            return decoder.decode(chunk, {\n                stream: true\n            });\n        };\n    }\n    return function(chunk) {\n        const decoded = decoder.decode(chunk, {\n            stream: true\n        }).split(\"\\n\").filter((line)=>line !== \"\");\n        return decoded.map(getStreamStringTypeAndValue).filter(Boolean);\n    };\n}\nvar StreamStringPrefixes = {\n    text: 0,\n    function_call: 1,\n    data: 2\n};\nvar isStreamStringEqualToType = (type, value)=>value.startsWith(`${StreamStringPrefixes[type]}:`) && value.endsWith(\"\\n\");\nvar getStreamString = (type, value)=>`${StreamStringPrefixes[type]}:${JSON.stringify(value)}\n`;\nvar getStreamStringTypeAndValue = (line)=>{\n    const firstSeperatorIndex = line.indexOf(\":\");\n    const prefix = line.slice(0, firstSeperatorIndex);\n    const type = Object.keys(StreamStringPrefixes).find((key)=>StreamStringPrefixes[key] === Number(prefix));\n    const val = line.slice(firstSeperatorIndex + 1);\n    let parsedVal = val;\n    if (!val) {\n        return {\n            type,\n            value: \"\"\n        };\n    }\n    try {\n        parsedVal = JSON.parse(val);\n    } catch (e) {\n        console.error(\"Failed to parse JSON value:\", val);\n    }\n    return {\n        type,\n        value: parsedVal\n    };\n};\nvar COMPLEX_HEADER = \"X-Experimental-Stream-Data\";\n// streams/stream-data.ts\nvar experimental_StreamData = class {\n    constructor(){\n        this.encoder = new TextEncoder();\n        this.controller = null;\n        // closing the stream is synchronous, but we want to return a promise\n        // in case we're doing async work\n        this.isClosedPromise = null;\n        this.isClosedPromiseResolver = void 0;\n        this.isClosed = false;\n        // array to store appended data\n        this.data = [];\n        this.isClosedPromise = new Promise((resolve)=>{\n            this.isClosedPromiseResolver = resolve;\n        });\n        const self = this;\n        this.stream = new TransformStream({\n            start: async (controller)=>{\n                self.controller = controller;\n            },\n            transform: async (chunk, controller)=>{\n                if (self.data.length > 0) {\n                    const encodedData = self.encoder.encode(getStreamString(\"data\", JSON.stringify(self.data)));\n                    self.data = [];\n                    controller.enqueue(encodedData);\n                }\n                controller.enqueue(chunk);\n            },\n            async flush (controller) {\n                const warningTimeout =  true ? setTimeout(()=>{\n                    console.warn(\"The data stream is hanging. Did you forget to close it with `data.close()`?\");\n                }, 3e3) : 0;\n                await self.isClosedPromise;\n                if (warningTimeout !== null) {\n                    clearTimeout(warningTimeout);\n                }\n                if (self.data.length) {\n                    const encodedData = self.encoder.encode(getStreamString(\"data\", JSON.stringify(self.data)));\n                    controller.enqueue(encodedData);\n                }\n            }\n        });\n    }\n    async close() {\n        var _a;\n        if (this.isClosed) {\n            throw new Error(\"Data Stream has already been closed.\");\n        }\n        if (!this.controller) {\n            throw new Error(\"Stream controller is not initialized.\");\n        }\n        (_a = this.isClosedPromiseResolver) == null ? void 0 : _a.call(this);\n        this.isClosed = true;\n    }\n    append(value) {\n        if (this.isClosed) {\n            throw new Error(\"Data Stream has already been closed.\");\n        }\n        this.data.push(value);\n    }\n};\nfunction createStreamDataTransformer(experimental_streamData) {\n    if (!experimental_streamData) {\n        return new TransformStream({\n            transform: async (chunk, controller)=>{\n                controller.enqueue(chunk);\n            }\n        });\n    }\n    const encoder = new TextEncoder();\n    const decoder = new TextDecoder();\n    return new TransformStream({\n        transform: async (chunk, controller)=>{\n            const message = decoder.decode(chunk);\n            controller.enqueue(encoder.encode(getStreamString(\"text\", message)));\n        }\n    });\n}\n// streams/openai-stream.ts\nfunction parseOpenAIStream() {\n    const extract = chunkToText();\n    return (data)=>{\n        return extract(JSON.parse(data));\n    };\n}\nasync function* streamable(stream) {\n    const extract = chunkToText();\n    for await (const chunk of stream){\n        const text = extract(chunk);\n        if (text) yield text;\n    }\n}\nfunction chunkToText() {\n    const trimStartOfStream = trimStartOfStreamHelper();\n    let isFunctionStreamingIn;\n    return (json)=>{\n        var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;\n        if (isChatCompletionChunk(json) && ((_c = (_b = (_a = json.choices[0]) == null ? void 0 : _a.delta) == null ? void 0 : _b.function_call) == null ? void 0 : _c.name)) {\n            isFunctionStreamingIn = true;\n            return `{\"function_call\": {\"name\": \"${(_e = (_d = json.choices[0]) == null ? void 0 : _d.delta) == null ? void 0 : _e.function_call.name}\", \"arguments\": \"`;\n        } else if (isChatCompletionChunk(json) && ((_h = (_g = (_f = json.choices[0]) == null ? void 0 : _f.delta) == null ? void 0 : _g.function_call) == null ? void 0 : _h.arguments)) {\n            const argumentChunk = json.choices[0].delta.function_call.arguments;\n            let escapedPartialJson = argumentChunk.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\//g, \"\\\\/\").replace(/\"/g, '\\\\\"').replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/\\t/g, \"\\\\t\").replace(/\\f/g, \"\\\\f\");\n            return `${escapedPartialJson}`;\n        } else if (isFunctionStreamingIn && (((_i = json.choices[0]) == null ? void 0 : _i.finish_reason) === \"function_call\" || ((_j = json.choices[0]) == null ? void 0 : _j.finish_reason) === \"stop\")) {\n            isFunctionStreamingIn = false;\n            return '\"}}';\n        }\n        const text = trimStartOfStream(isChatCompletionChunk(json) && json.choices[0].delta.content ? json.choices[0].delta.content : isCompletion(json) ? json.choices[0].text : \"\");\n        return text;\n    };\n}\nvar __internal__OpenAIFnMessagesSymbol = Symbol(\"internal_openai_fn_messages\");\nfunction isChatCompletionChunk(data) {\n    return \"choices\" in data && data.choices && data.choices[0] && \"delta\" in data.choices[0];\n}\nfunction isCompletion(data) {\n    return \"choices\" in data && data.choices && data.choices[0] && \"text\" in data.choices[0];\n}\nfunction OpenAIStream(res, callbacks) {\n    const cb = callbacks;\n    let stream;\n    if (Symbol.asyncIterator in res) {\n        stream = readableFromAsyncIterable(streamable(res)).pipeThrough(createCallbacksTransformer((cb == null ? void 0 : cb.experimental_onFunctionCall) ? {\n            ...cb,\n            onFinal: void 0\n        } : {\n            ...cb\n        }));\n    } else {\n        stream = AIStream(res, parseOpenAIStream(), (cb == null ? void 0 : cb.experimental_onFunctionCall) ? {\n            ...cb,\n            onFinal: void 0\n        } : {\n            ...cb\n        });\n    }\n    if (cb && cb.experimental_onFunctionCall) {\n        const functionCallTransformer = createFunctionCallTransformer(cb);\n        return stream.pipeThrough(functionCallTransformer);\n    } else {\n        return stream.pipeThrough(createStreamDataTransformer(cb == null ? void 0 : cb.experimental_streamData));\n    }\n}\nfunction createFunctionCallTransformer(callbacks) {\n    const textEncoder = new TextEncoder();\n    let isFirstChunk = true;\n    let aggregatedResponse = \"\";\n    let aggregatedFinalCompletionResponse = \"\";\n    let isFunctionStreamingIn = false;\n    let functionCallMessages = callbacks[__internal__OpenAIFnMessagesSymbol] || [];\n    const isComplexMode = callbacks == null ? void 0 : callbacks.experimental_streamData;\n    const decode = createChunkDecoder();\n    return new TransformStream({\n        async transform (chunk, controller) {\n            const message = decode(chunk);\n            aggregatedFinalCompletionResponse += message;\n            const shouldHandleAsFunction = isFirstChunk && message.startsWith('{\"function_call\":');\n            if (shouldHandleAsFunction) {\n                isFunctionStreamingIn = true;\n                aggregatedResponse += message;\n                isFirstChunk = false;\n                return;\n            }\n            if (!isFunctionStreamingIn) {\n                controller.enqueue(isComplexMode ? textEncoder.encode(getStreamString(\"text\", message)) : chunk);\n                return;\n            } else {\n                aggregatedResponse += message;\n            }\n        },\n        async flush (controller) {\n            try {\n                const isEndOfFunction = !isFirstChunk && callbacks.experimental_onFunctionCall && isFunctionStreamingIn;\n                if (isEndOfFunction && callbacks.experimental_onFunctionCall) {\n                    isFunctionStreamingIn = false;\n                    const payload = JSON.parse(aggregatedResponse);\n                    const argumentsPayload = JSON.parse(payload.function_call.arguments);\n                    let newFunctionCallMessages = [\n                        ...functionCallMessages\n                    ];\n                    const functionResponse = await callbacks.experimental_onFunctionCall({\n                        name: payload.function_call.name,\n                        arguments: argumentsPayload\n                    }, (result)=>{\n                        newFunctionCallMessages = [\n                            ...functionCallMessages,\n                            {\n                                role: \"assistant\",\n                                content: \"\",\n                                function_call: payload.function_call\n                            },\n                            {\n                                role: \"function\",\n                                name: payload.function_call.name,\n                                content: JSON.stringify(result)\n                            }\n                        ];\n                        return newFunctionCallMessages;\n                    });\n                    if (!functionResponse) {\n                        controller.enqueue(textEncoder.encode(isComplexMode ? getStreamString(\"function_call\", aggregatedResponse) : aggregatedResponse));\n                        return;\n                    } else if (typeof functionResponse === \"string\") {\n                        controller.enqueue(isComplexMode ? textEncoder.encode(getStreamString(\"text\", functionResponse)) : textEncoder.encode(functionResponse));\n                        return;\n                    }\n                    const filteredCallbacks = {\n                        ...callbacks,\n                        onStart: void 0\n                    };\n                    callbacks.onFinal = void 0;\n                    const openAIStream = OpenAIStream(functionResponse, {\n                        ...filteredCallbacks,\n                        [__internal__OpenAIFnMessagesSymbol]: newFunctionCallMessages\n                    });\n                    const reader = openAIStream.getReader();\n                    while(true){\n                        const { done, value } = await reader.read();\n                        if (done) {\n                            break;\n                        }\n                        controller.enqueue(value);\n                    }\n                }\n            } finally{\n                if (callbacks.onFinal && aggregatedFinalCompletionResponse) {\n                    await callbacks.onFinal(aggregatedFinalCompletionResponse);\n                }\n            }\n        }\n    });\n}\n// streams/streaming-text-response.ts\nvar StreamingTextResponse = class extends Response {\n    constructor(res, init, data){\n        let processedStream = res;\n        if (data) {\n            processedStream = res.pipeThrough(data.stream);\n        }\n        super(processedStream, {\n            ...init,\n            status: 200,\n            headers: {\n                \"Content-Type\": \"text/plain; charset=utf-8\",\n                [COMPLEX_HEADER]: data ? \"true\" : \"false\",\n                ...init == null ? void 0 : init.headers\n            }\n        });\n    }\n};\nfunction streamToResponse(res, response, init) {\n    response.writeHead((init == null ? void 0 : init.status) || 200, {\n        \"Content-Type\": \"text/plain; charset=utf-8\",\n        ...init == null ? void 0 : init.headers\n    });\n    const reader = res.getReader();\n    function read() {\n        reader.read().then(({ done, value })=>{\n            if (done) {\n                response.end();\n                return;\n            }\n            response.write(value);\n            read();\n        });\n    }\n    read();\n}\n// streams/huggingface-stream.ts\nfunction createParser2(res) {\n    const trimStartOfStream = trimStartOfStreamHelper();\n    return new ReadableStream({\n        async pull (controller) {\n            var _a, _b;\n            const { value, done } = await res.next();\n            if (done) {\n                controller.close();\n                return;\n            }\n            const text = trimStartOfStream((_b = (_a = value.token) == null ? void 0 : _a.text) != null ? _b : \"\");\n            if (!text) return;\n            if (value.generated_text != null && value.generated_text.length > 0) {\n                controller.close();\n                return;\n            }\n            if (text === \"</s>\" || text === \"<|endoftext|>\" || text === \"<|end|>\") {\n                controller.close();\n            } else {\n                controller.enqueue(text);\n            }\n        }\n    });\n}\nfunction HuggingFaceStream(res, callbacks) {\n    return createParser2(res).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(createStreamDataTransformer(callbacks == null ? void 0 : callbacks.experimental_streamData));\n}\n// streams/cohere-stream.ts\nvar utf8Decoder = new TextDecoder(\"utf-8\");\nasync function processLines(lines, controller) {\n    for (const line of lines){\n        const { text, is_finished } = JSON.parse(line);\n        if (!is_finished) {\n            controller.enqueue(text);\n        }\n    }\n}\nasync function readAndProcessLines(reader, controller) {\n    let segment = \"\";\n    while(true){\n        const { value: chunk, done } = await reader.read();\n        if (done) {\n            break;\n        }\n        segment += utf8Decoder.decode(chunk, {\n            stream: true\n        });\n        const linesArray = segment.split(/\\r\\n|\\n|\\r/g);\n        segment = linesArray.pop() || \"\";\n        await processLines(linesArray, controller);\n    }\n    if (segment) {\n        const linesArray = [\n            segment\n        ];\n        await processLines(linesArray, controller);\n    }\n    controller.close();\n}\nfunction createParser3(res) {\n    var _a;\n    const reader = (_a = res.body) == null ? void 0 : _a.getReader();\n    return new ReadableStream({\n        async start (controller) {\n            if (!reader) {\n                controller.close();\n                return;\n            }\n            await readAndProcessLines(reader, controller);\n        }\n    });\n}\nfunction CohereStream(reader, callbacks) {\n    return createParser3(reader).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(createStreamDataTransformer(callbacks == null ? void 0 : callbacks.experimental_streamData));\n}\n// streams/anthropic-stream.ts\nfunction parseAnthropicStream() {\n    let previous = \"\";\n    return (data)=>{\n        const json = JSON.parse(data);\n        if (\"error\" in json) {\n            throw new Error(`${json.error.type}: ${json.error.message}`);\n        }\n        if (!(\"completion\" in json)) {\n            return;\n        }\n        const text = json.completion;\n        if (!previous || text.length > previous.length && text.startsWith(previous)) {\n            const delta = text.slice(previous.length);\n            previous = text;\n            return delta;\n        }\n        return text;\n    };\n}\nasync function* streamable2(stream) {\n    for await (const chunk of stream){\n        const text = chunk.completion;\n        if (text) yield text;\n    }\n}\nfunction AnthropicStream(res, cb) {\n    if (Symbol.asyncIterator in res) {\n        return readableFromAsyncIterable(streamable2(res)).pipeThrough(createCallbacksTransformer(cb)).pipeThrough(createStreamDataTransformer(cb == null ? void 0 : cb.experimental_streamData));\n    } else {\n        return AIStream(res, parseAnthropicStream(), cb).pipeThrough(createStreamDataTransformer(cb == null ? void 0 : cb.experimental_streamData));\n    }\n}\n// streams/langchain-stream.ts\nfunction LangChainStream(callbacks) {\n    const stream = new TransformStream();\n    const writer = stream.writable.getWriter();\n    const runs = /* @__PURE__ */ new Set();\n    const handleError = async (e, runId)=>{\n        runs.delete(runId);\n        await writer.ready;\n        await writer.abort(e);\n    };\n    const handleStart = async (runId)=>{\n        runs.add(runId);\n    };\n    const handleEnd = async (runId)=>{\n        runs.delete(runId);\n        if (runs.size === 0) {\n            await writer.ready;\n            await writer.close();\n        }\n    };\n    return {\n        stream: stream.readable.pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(createStreamDataTransformer(callbacks == null ? void 0 : callbacks.experimental_streamData)),\n        writer,\n        handlers: {\n            handleLLMNewToken: async (token)=>{\n                await writer.ready;\n                await writer.write(token);\n            },\n            handleLLMStart: async (_llm, _prompts, runId)=>{\n                handleStart(runId);\n            },\n            handleLLMEnd: async (_output, runId)=>{\n                await handleEnd(runId);\n            },\n            handleLLMError: async (e, runId)=>{\n                await handleError(e, runId);\n            },\n            handleChainStart: async (_chain, _inputs, runId)=>{\n                handleStart(runId);\n            },\n            handleChainEnd: async (_outputs, runId)=>{\n                await handleEnd(runId);\n            },\n            handleChainError: async (e, runId)=>{\n                await handleError(e, runId);\n            },\n            handleToolStart: async (_tool, _input, runId)=>{\n                handleStart(runId);\n            },\n            handleToolEnd: async (_output, runId)=>{\n                await handleEnd(runId);\n            },\n            handleToolError: async (e, runId)=>{\n                await handleError(e, runId);\n            }\n        }\n    };\n}\n// streams/replicate-stream.ts\nasync function ReplicateStream(res, cb) {\n    var _a;\n    const url = (_a = res.urls) == null ? void 0 : _a.stream;\n    if (!url) {\n        if (res.error) throw new Error(res.error);\n        else throw new Error(\"Missing stream URL in Replicate response\");\n    }\n    const eventStream = await fetch(url, {\n        method: \"GET\",\n        headers: {\n            Accept: \"text/event-stream\"\n        }\n    });\n    return AIStream(eventStream, void 0, cb).pipeThrough(createStreamDataTransformer(cb == null ? void 0 : cb.experimental_streamData));\n}\n// streams/streaming-react-response.ts\nvar experimental_StreamingReactResponse = class {\n    constructor(res, options){\n        let resolveFunc = ()=>{};\n        let next = new Promise((resolve)=>{\n            resolveFunc = resolve;\n        });\n        let content = \"\";\n        const decode = createChunkDecoder();\n        const reader = res.getReader();\n        async function readChunk() {\n            var _a;\n            const { done, value } = await reader.read();\n            if (!done) {\n                content += decode(value);\n            }\n            const ui = ((_a = options == null ? void 0 : options.ui) == null ? void 0 : _a.call(options, {\n                content\n            })) || content;\n            const payload = {\n                ui,\n                content\n            };\n            const resolvePrevious = resolveFunc;\n            const nextRow = done ? null : new Promise((resolve)=>{\n                resolveFunc = resolve;\n            });\n            resolvePrevious({\n                next: nextRow,\n                ...payload\n            });\n            if (done) {\n                return;\n            }\n            await readChunk();\n        }\n        readChunk();\n        return next;\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/nanoid/non-secure/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/ai/node_modules/nanoid/non-secure/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   customAlphabet: () => (/* binding */ customAlphabet),\n/* harmony export */   nanoid: () => (/* binding */ nanoid)\n/* harmony export */ });\nlet urlAlphabet = \"useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict\";\nlet customAlphabet = (alphabet, defaultSize = 21)=>{\n    return (size = defaultSize)=>{\n        let id = \"\";\n        let i = size;\n        while(i--){\n            id += alphabet[Math.random() * alphabet.length | 0];\n        }\n        return id;\n    };\n};\nlet nanoid = (size = 21)=>{\n    let id = \"\";\n    let i = size;\n    while(i--){\n        id += urlAlphabet[Math.random() * 64 | 0];\n    }\n    return id;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL25hbm9pZC9ub24tc2VjdXJlL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBSUEsY0FDRjtBQUNGLElBQUlDLGlCQUFpQixDQUFDQyxVQUFVQyxjQUFjLEVBQUU7SUFDOUMsT0FBTyxDQUFDQyxPQUFPRCxXQUFXO1FBQ3hCLElBQUlFLEtBQUs7UUFDVCxJQUFJQyxJQUFJRjtRQUNSLE1BQU9FLElBQUs7WUFDVkQsTUFBTUgsUUFBUSxDQUFDLEtBQU1NLE1BQU0sS0FBS04sU0FBU08sTUFBTSxHQUFJLEVBQUU7UUFDdkQ7UUFDQSxPQUFPSjtJQUNUO0FBQ0Y7QUFDQSxJQUFJSyxTQUFTLENBQUNOLE9BQU8sRUFBRTtJQUNyQixJQUFJQyxLQUFLO0lBQ1QsSUFBSUMsSUFBSUY7SUFDUixNQUFPRSxJQUFLO1FBQ1ZELE1BQU1MLFdBQVcsQ0FBQyxLQUFNUSxNQUFNLEtBQUssS0FBTSxFQUFFO0lBQzdDO0lBQ0EsT0FBT0g7QUFDVDtBQUNpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F6dXJlLW9wZW4tYWktYWNjZWxlcmF0b3IvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL25hbm9pZC9ub24tc2VjdXJlL2luZGV4LmpzPzM3NGYiXSwic291cmNlc0NvbnRlbnQiOlsibGV0IHVybEFscGhhYmV0ID1cbiAgJ3VzZWFuZG9tLTI2VDE5ODM0MFBYNzVweEpBQ0tWRVJZTUlOREJVU0hXT0xGX0dRWmJmZ2hqa2xxdnd5enJpY3QnXG5sZXQgY3VzdG9tQWxwaGFiZXQgPSAoYWxwaGFiZXQsIGRlZmF1bHRTaXplID0gMjEpID0+IHtcbiAgcmV0dXJuIChzaXplID0gZGVmYXVsdFNpemUpID0+IHtcbiAgICBsZXQgaWQgPSAnJ1xuICAgIGxldCBpID0gc2l6ZVxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlkICs9IGFscGhhYmV0WyhNYXRoLnJhbmRvbSgpICogYWxwaGFiZXQubGVuZ3RoKSB8IDBdXG4gICAgfVxuICAgIHJldHVybiBpZFxuICB9XG59XG5sZXQgbmFub2lkID0gKHNpemUgPSAyMSkgPT4ge1xuICBsZXQgaWQgPSAnJ1xuICBsZXQgaSA9IHNpemVcbiAgd2hpbGUgKGktLSkge1xuICAgIGlkICs9IHVybEFscGhhYmV0WyhNYXRoLnJhbmRvbSgpICogNjQpIHwgMF1cbiAgfVxuICByZXR1cm4gaWRcbn1cbmV4cG9ydCB7IG5hbm9pZCwgY3VzdG9tQWxwaGFiZXQgfVxuIl0sIm5hbWVzIjpbInVybEFscGhhYmV0IiwiY3VzdG9tQWxwaGFiZXQiLCJhbHBoYWJldCIsImRlZmF1bHRTaXplIiwic2l6ZSIsImlkIiwiaSIsIk1hdGgiLCJyYW5kb20iLCJsZW5ndGgiLCJuYW5vaWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/nanoid/non-secure/index.js\n");

/***/ })

};
;